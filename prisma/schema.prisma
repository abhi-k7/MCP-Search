// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  username  String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //Relations
  likes Like[]
  servers McpServer[]
  blueprints Blueprint[] // User can have many blueprints
}

model McpServer {
  id            String   @id @default(cuid())
  name          String
  category      String
  description   String
  documentation String
  logoUrl       String?
  githubUrl     String?
  isRemote      Boolean
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  //Relations
  user   User   @relation(fields: [userId], references: [id])
  userId String
  likes Like[]
  blueprints Blueprint[]  // MCP server can be in many blueprints
}

model Like {
  id         String     @id @default(cuid())
  userId     String
  serverId   String
  createdAt  DateTime   @default(now())

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  server     McpServer  @relation(fields: [serverId], references: [id], onDelete: Cascade)

  @@unique([userId, serverId]) // Prevent duplicate likes
}

model Blueprint {
  id          String     @id @default(cuid())
  title       String
  description String
  isPublic    Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  userId String
  mcpServers McpServer[] // Many-to-many with McpServer (implicit)
}
